#!/usr/bin/env sh

x=$(cat "/sys/bus/iio/devices/iio:device0/in_accel_x_raw")
y=$(cat "/sys/bus/iio/devices/iio:device0/in_accel_y_raw")
z=$(cat "/sys/bus/iio/devices/iio:device0/in_accel_z_raw")

echo "x: $x"
echo "y: $y"
echo "z: $z"

function rotate_auto() {
    if [ $x = 0 ] && [ $y = -9 ]; then
        rotate_normal   
    elif [ $x = -9 ] && [ $y = 0 ]; then
        rotate_right
    elif [ $x = 9 ] && [ $y = 0 ]; then
        rotate_left
    elif [ $x = 0 ] && [ $y = 9 ]; then
        rotate_inverted
    fi
}

SCREEN="eDP"
TRANSFORMATION="Coordinate Transformation Matrix"

input_devices=( 10 12 13 20 16 )

function rotate_normal() {
    xrandr --output $SCREEN --rotate normal
    for i in "${input_devices[@]}"
    do
        xinput set-prop $i --type=float "$TRANSFORMATION" 1 0 0 0 1 0 0 0 1
    done
}

function rotate_left() {
    xrandr --output $SCREEN --rotate left
    for i in "${input_devices[@]}"
    do
        xinput set-prop $i --type=float "$TRANSFORMATION" 0 -1 1 1 0 0 0 0 1 
    done
}

function rotate_right() {
    xrandr --output $SCREEN --rotate right
    for i in "${input_devices[@]}"
    do
        xinput set-prop $i --type=float "$TRANSFORMATION" 0 1 0 -1 0 1 0 0 1
    done
}

function rotate_inverted() {
    xrandr --output $SCREEN --rotate inverted
    for i in "${input_devices[@]}"
    do
        xinput set-prop $i --type=float "$TRANSFORMATION" -1 0 1 0 -1 1 0 0 1 
    done
}

case $1 in
    'normal' )
        rotate_normal
        ;;
    'left' | 'l' )
        rotate_left
        ;;
    'right' | 'r' )
        rotate_right
        ;;
    'inverted' | 'inv' | 'i' )
        rotate_inverted
    ;;
    'auto' | 'a')
        rotate_auto
    ;;
    *)
        # rotate_auto
        rotate_normal
    ;;
esac
