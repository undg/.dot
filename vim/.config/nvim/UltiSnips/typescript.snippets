# snippet trigger_word [ "description" [ options ] ]
# The options currently supported are: >
#    b   Beginning of line
#    i   In-word expansion
#    w   Word boundary
#    r   Regular expression
#    t   Do not expand tabs
#    s   Remove whitespace
#    m   Trim all whitespaces
#    e   Custom context snippet
#    A   Snippet will be triggered automatically
# ...
#endsnippet

priority -50

extends javascript

snippet int "interface"
interface ${1} {
}
endsnippet

snippet nspc "namespace"
namespace ${1} {
}
endsnippet

priority -49

snippet fun "function (named)" b
function ${1:function_name} (${2:argument}: ${3:argument_type}) {
	${VISUAL}$0
}
endsnippet

snippet cfun "function (assigned to const)"
${1:const }${2:name} = ($3) => ${VISUAL}$0
endsnippet

snippet des "describe('should ', ()=>{})" b
describe(\`${1:description}\`, () => {
	${2}
})
endsnippet

snippet it "is('should ', ()=>{})" b
it(\`should ${1:description}\`, () => {
	${2}
})
endsnippet

snippet exp "expect(${1})${2}" b
expect(${1})${2}
endsnippet

snippet cl "console.log('value:', value)" b
console.log(\`$1:\n\`, ${1})
endsnippet

snippet fori "traditional for loop" b
for(let ${1:i} = 0; $1< ${2:arr.length}; $1++) {
	$3
}
endsnippet

snippet forin "traditional for loop" b
for(let ${1:key} = 0 in ${2:list}) {
	$2
}
endsnippet
snippet forof "traditional for loop" b
for(let ${1:value} = 0 of ${2:list}) {
	$2
}
endsnippet

snippet cspell "cspell:disable" b
// cspell:disable -- disable spell checking for strings
endsnippet

