# snippet trigger_word [ "description" [ options ] ]
# The options currently supported are: >
#    b   Beginning of line
#    i   In-word expansion
#    w   Word boundary
#    r   Regular expression
#    t   Do not expand tabs
#    s   Remove whitespace
#    m   Trim all whitespaces
#    e   Custom context snippet
#    A   Snippet will be triggered automatically
# ...

#endsnippet
# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############
global !p
from uuid import uuid4
LOREM = """
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod \
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At \
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, \
no sea takimata sanctus est Lorem ipsum dolor sit amet.
"""
endglobal

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet "lorem(([1-4])?[0-9])?" "Lorem Ipsum" r
`!p snip.rv = " ".join(LOREM.split()[:int(match.group(1))]) if match.group(1) else LOREM`
endsnippet

##########################
# VIM MODELINE GENERATOR #
##########################
# See advice on `:help 'tabstop'` for why these values are set. Uses second
# modeline form ('set') to work in languages with comment terminators
# (/* like C */).
snippet modeline "Vim modeline"
vim`!v ':set '. (&expandtab ? printf('et sw=%i ts=%i', &sw, &ts) : printf('noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
endsnippet

#########
# DATES #
#########
snippet date "YYYY-MM-DD" d
`!v strftime("%Y-%m-%d")`
endsnippet

snippet ddate "Month DD, YYYY" d
`!v strftime("%b %d, %Y")`
endsnippet

snippet diso "ISO format datetime" d
`!v strftime("%Y-%m-%d %H:%M:%S%z")`
endsnippet

snippet time "hh:mm" d
`!v strftime("%H:%M")`
endsnippet

snippet timesec "hh:mm:ss" d
`!v strftime("%H:%M:%S")`
endsnippet


snippet datetime "YYYY-MM-DD hh:mm" d
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet datetimesec "YYYY-MM-DD hh:mm:ss" d
`!v strftime("%Y-%m-%d %H:%M:%S")`
endsnippet

##########
#  Misc  #
##########

snippet todo "TODO"
`!v GetCommentMarker()`@TODO (`git config user.name`) `!v strftime("%Y-%m-%d")`: $1
endsnippet

snippet todo// "TODO"
// @TODO (`git config user.name`) `!v strftime("%Y-%m-%d")`: $1
endsnippet
snippet todo# "TODO"
# @TODO (`git config user.name`) `!v strftime("%Y-%m-%d")`: $1
endsnippet
snippet todo-- "TODO"
-- @TODO (`git config user.name`) `!v strftime("%Y-%m-%d")`: $1 
endsnippet

snippet uuid "Random UUID"
`!p if not snip.c: snip.rv = str(uuid4())`
endsnippet

snippet uuidShort "Random UUID" i
`!p if not snip.c: snip.rv = str(uuid4()).split('-')[0]`
endsnippet

# vim:ft=snippets:
