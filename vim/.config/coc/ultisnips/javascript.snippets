# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# snippet trigger_word "description" A
# function ${1}(${2}) {
# 	return ${2}
# }

snippet ir "import react" b
import React from 'react'
endsnippet

snippet fn "function" b
export function ${1:`!p snip.rv = snip.basename`}(${3:args}) {
	${4}
}
endsnippet

snippet fc "functional component" b
export function ${1:`!p snip.rv = snip.basename`Component}(${3:props}) {
	const {${3}} = props
	return (
		<div className="${1}_wrap">
			${4}
		</div>
	)
}
endsnippet

snippet rfc-cont "functional react component" b
export const ${1:`!p snip.rv = snip.basename`Component} = ${3:props} => {
	return (
		<>
			<p>${1}</p>
		</>
	)
}
endsnippet

snippet rfc "React functional component" A
function ${1:`!p snip.rv = snip.basename`Component}(${2:props}) {
	const {${3}} = props
	return (
		<div className="${1}_wrap">
			${4}
		</div>
	)
}
endsnippet

snippet useState "useState hook" b
const [$1, set${1/\w+/\u$0/g}] = useState("$2")
endsnippet

snippet import_react "Import React" A
import React${1:, \{$2\}} from 'react'
endsnippet

snippet setState "setState" A
const {$1, $2} = setState(${3:defaultValue})
endsnippet

